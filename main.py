import os;
import telebot;
import threading;
from http.server import BaseHTTPRequestHandler, HTTPServer;
import json;
from urllib.parse import parse_qs;
from html import unescape;

password = os.environ["PASSWORD"];

f = open("index.html", "r+");
index = f.read();
f.close();

f = open("topics.json", "r");
topics = json.loads(f.read());
f.close();
def commit_topics():
	f = open("topics.json", "w");
	f.write(json.dumps(topics));
	f.close();
	
f = open("names.json", "r");
names = json.loads(f.read());
f.close();
def commit_names():
	f = open("names.json", "w");
	f.write(json.dumps(names));
	f.close();

bot = telebot.TeleBot(os.environ["TOKEN"]);
no_markup = telebot.types.ReplyKeyboardRemove(selective=False);

def server():
	class WebRequestHandler(BaseHTTPRequestHandler):
		def do_GET(self):
			self.send_response(200);
			self.send_header("Content-Type", "text/html");
			self.end_headers();
			self.wfile.write(bytes(index, "ascii"));
			
		def do_POST(self):
			content_length = int(self.headers["Content-Length"]);
			data = parse_qs(self.rfile.read(content_length).decode());
			if(data["password"][0] != password):
				self.send_response(403);
				self.send_header("Content-Type", "text/plain");
				self.end_headers();
				self.wfile.write(b"Wrong password.");
				return;
			if(self.path == "/new"):
				try:
					users = topics[data["topic"][0]];
					for i in users:
						bot.send_message(i, "–ü—Ä–∏–≤–µ—Ç!\n–ú—ã –≤—ã–ª–æ–∂–∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ \"" + names[data["topic"][0]] + "\", –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏!\n\n" + data["url"][0], reply_markup=no_markup);
					self.send_response(200);
					self.send_header("Content-Type", "text/plain");
					self.end_headers();
					self.wfile.write(b"Sent messages!");
				except KeyError:
					self.send_response(400);
					self.send_header("Content-Type", "text/plain");
					self.end_headers();
					self.wfile.write(b"This topic does not exist.");
			elif(self.path == "/newtopic"):
				topics[data["topic"][0]] = [];
				names[data["topic"][0]] = unescape(data["topicname"][0]);
				commit_topics();
				commit_names();
				self.send_response(400);
				self.send_header("Content-Type", "text/plain");
				self.end_headers();
				self.wfile.write(b"Topic created!");
				
	server = HTTPServer(("", 8080), WebRequestHandler);
	server.serve_forever();
threading.Thread(target=server).start();

@bot.message_handler(commands=["start"])
def send_welcome(message):
	try:
		topic = message.text.split(" ")[1];
		if(message.from_user.id not in topics[topic]): topics[topic] += [message.from_user.id];
		commit_topics();
		bot.reply_to(message, "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ —Ç–µ–º—É " + names[topic] + "!", reply_markup=markup);
	except IndexError:
		bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ –∫–æ—Å–º–æ—Å—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–°–ª–µ–¥–∏—Ç—å\" –ø–æ–¥ –ø–æ—Å—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ –∏ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –º–∏—Å—Å–∏—é, –∫–æ–º–ø–∞–Ω–∏—é, —Å—Ç—Ä–∞–Ω—É –∏ —Ç. –¥.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—Ä—É—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —Ç–µ–º—É, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è —Ç–µ–º—ã, –∏ —è —Ç–µ–±–µ –ø–æ–∫–∞–∂—É —Ç–æ, –Ω–∞ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.", reply_markup=no_markup);

@bot.message_handler(func=lambda m: True)
def search_topics(message):
	markup = telebot.types.InlineKeyboardMarkup();
	for i, j in names.items():
		if(message.text.lower() in j.lower()):
			btn = telebot.types.InlineKeyboardButton(j, callback_data=i);
			markup.add(btn);
	bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=markup);

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	if(call.from_user.id not in topics[call.data]): topics[call.data] += [call.from_user.id];
	commit_topics();
	bot.send_message(call.from_user.id, "–ü–æ–¥–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ —Ç–µ–º—É!");
	bot.answer_callback_query(call.id);

bot.infinity_polling();
